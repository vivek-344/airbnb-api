// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: room.sql

package db

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
  room_id,
  max_guests,
  balcony,
  fridge,
  indoor_pool,
  gaming_console
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING room_id, max_guests, balcony, fridge, indoor_pool, gaming_console
`

type CreateRoomParams struct {
	RoomID        int32 `json:"room_id"`
	MaxGuests     int32 `json:"max_guests"`
	Balcony       bool  `json:"balcony"`
	Fridge        bool  `json:"fridge"`
	IndoorPool    bool  `json:"indoor_pool"`
	GamingConsole bool  `json:"gaming_console"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom,
		arg.RoomID,
		arg.MaxGuests,
		arg.Balcony,
		arg.Fridge,
		arg.IndoorPool,
		arg.GamingConsole,
	)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.MaxGuests,
		&i.Balcony,
		&i.Fridge,
		&i.IndoorPool,
		&i.GamingConsole,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM room WHERE room_id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, roomID int32) error {
	_, err := q.db.Exec(ctx, deleteRoom, roomID)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT room_id, max_guests, balcony, fridge, indoor_pool, gaming_console FROM room
WHERE room_id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, roomID int32) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, roomID)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.MaxGuests,
		&i.Balcony,
		&i.Fridge,
		&i.IndoorPool,
		&i.GamingConsole,
	)
	return i, err
}

const getRoomCount = `-- name: GetRoomCount :one
SELECT COUNT(room_id) FROM room
`

func (q *Queries) GetRoomCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getRoomCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listAllRoomIDs = `-- name: ListAllRoomIDs :many
SELECT room_id 
FROM room
`

func (q *Queries) ListAllRoomIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, listAllRoomIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var room_id int32
		if err := rows.Scan(&room_id); err != nil {
			return nil, err
		}
		items = append(items, room_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRooms = `-- name: ListRooms :many
SELECT room_id, max_guests, balcony, fridge, indoor_pool, gaming_console FROM room
ORDER BY room_id
LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.RoomID,
			&i.MaxGuests,
			&i.Balcony,
			&i.Fridge,
			&i.IndoorPool,
			&i.GamingConsole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaxGuests = `-- name: UpdateMaxGuests :one
UPDATE room
SET max_guests = $2
WHERE room_id = $1
RETURNING room_id, max_guests, balcony, fridge, indoor_pool, gaming_console
`

type UpdateMaxGuestsParams struct {
	RoomID    int32 `json:"room_id"`
	MaxGuests int32 `json:"max_guests"`
}

func (q *Queries) UpdateMaxGuests(ctx context.Context, arg UpdateMaxGuestsParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateMaxGuests, arg.RoomID, arg.MaxGuests)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.MaxGuests,
		&i.Balcony,
		&i.Fridge,
		&i.IndoorPool,
		&i.GamingConsole,
	)
	return i, err
}

const updateRoomConsole = `-- name: UpdateRoomConsole :one
UPDATE room
SET gaming_console = $2
WHERE room_id = $1
RETURNING room_id, max_guests, balcony, fridge, indoor_pool, gaming_console
`

type UpdateRoomConsoleParams struct {
	RoomID        int32 `json:"room_id"`
	GamingConsole bool  `json:"gaming_console"`
}

func (q *Queries) UpdateRoomConsole(ctx context.Context, arg UpdateRoomConsoleParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoomConsole, arg.RoomID, arg.GamingConsole)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.MaxGuests,
		&i.Balcony,
		&i.Fridge,
		&i.IndoorPool,
		&i.GamingConsole,
	)
	return i, err
}

const updateRoomFridge = `-- name: UpdateRoomFridge :one
UPDATE room
SET fridge = $2
WHERE room_id = $1
RETURNING room_id, max_guests, balcony, fridge, indoor_pool, gaming_console
`

type UpdateRoomFridgeParams struct {
	RoomID int32 `json:"room_id"`
	Fridge bool  `json:"fridge"`
}

func (q *Queries) UpdateRoomFridge(ctx context.Context, arg UpdateRoomFridgeParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoomFridge, arg.RoomID, arg.Fridge)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.MaxGuests,
		&i.Balcony,
		&i.Fridge,
		&i.IndoorPool,
		&i.GamingConsole,
	)
	return i, err
}
